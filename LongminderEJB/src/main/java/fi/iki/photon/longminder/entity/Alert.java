package fi.iki.photon.longminder.entity;

import java.io.Serializable;

import javax.ejb.EJB;
import javax.persistence.*;

import fi.iki.photon.longminder.UserManager;
import fi.iki.photon.longminder.UserManagerBean;
import fi.iki.photon.longminder.entity.dto.AlertDTO;

import java.util.Date;


/**
 * The persistent class for the ALERT database table.
 * 
 * Contains the description of the alert and the next alert date,
 * and possibly a reference to REPEAT table, where the information
 * about repeating alarm is stored.
 * 
 * Has also an OWNER field referenced/generated by data description in
 * User.java, but the reference is JPA-unidirectional.
 */
@Entity
public class Alert extends fi.iki.photon.utils.Entity implements Serializable {
	private static final long serialVersionUID = 1L;
	
	@Id
	@GeneratedValue(strategy=GenerationType.IDENTITY)
	private int id;

	@Column(nullable=false, length=128)
	private String description;

	@Temporal(TemporalType.DATE)
    @Column(nullable=false)
	private Date nextAlert;

	@OneToOne(cascade=CascadeType.ALL, orphanRemoval=true)
    @JoinColumn(name="REPEAT", nullable=true)
	private Repeat repeat;
	
	//bi-directional many-to-one association to Userrecord
//	@ManyToOne
//	@JoinColumn(name="OWNER", nullable=false)
//	private User owner;

	protected Alert() {
	}
	
	public Alert(AlertDTO dto) {
		initialize(dto);
	}

	/**
	 * Given an AlertDTO, fills the data in this Alert object by the supplied values.
	 * 
	 * @param dto
	 */
	
	public void initialize(AlertDTO dto) {
		this.description = dto.getDescription();
		this.nextAlert = dto.getNextAlert();

		if (dto.getRepeatType() == AlertDTO.REPEAT_NO) {
			this.setRepeat(null);
		}
		
		if (dto.getRepeatType() == AlertDTO.REPEAT_DAY) {
			DayRepeat drep = new DayRepeat();
			drep.setRepeatUntil(dto.getRepeatUntil());
			drep.setRepeatTimes(dto.getRepeatTimes());
			drep.setDayDelay(dto.getDayDelay());
			this.setRepeat(drep);
		}
		if (dto.getRepeatType() == AlertDTO.REPEAT_WEEK) {
			WeekRepeat wrep = new WeekRepeat();
			wrep.setRepeatUntil(dto.getRepeatUntil());
			wrep.setRepeatTimes(dto.getRepeatTimes());
			wrep.setWeekDelay(dto.getWeekDelay());
			wrep.setAlertWeekDay(dto.getAlertWeekDay());
			this.setRepeat(wrep);
		}
	}

	/**
	 * Given an AlertDTO object, fills its data with data from this
	 * object.
	 * 
	 * @param a
	 */
	
	public void initializeDTO(AlertDTO a) {
		a.setId(getId());
		a.setDescription(getDescription());
		a.setNextAlert(getNextAlert());
		
		Repeat r = getRepeat();
		a.setRepeatType(AlertDTO.REPEAT_NO);
		if (r != null) {
			a.setRepeatUntil(r.getRepeatUntil());
			a.setRepeatTimes(r.getRepeatTimes());
			if (r instanceof DayRepeat) {
				a.setDayDelay(((DayRepeat) r).getDayDelay());
				a.setRepeatType(AlertDTO.REPEAT_DAY);
			}
			if (r instanceof WeekRepeat) {
				a.setDayDelay(((WeekRepeat) r).getWeekDelay());
				a.setAlertWeekDay(((WeekRepeat) r).getAlertWeekDay());
				a.setRepeatType(AlertDTO.REPEAT_WEEK);
			}
		}
	}

	public int getId() {
		return this.id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public Date getNextAlert() {
		return this.nextAlert;
	}

	public void setNextAlert(Date nextAlert) {
		this.nextAlert = nextAlert;
	}

	public int getRepeatType() {
		if (getRepeat() == null) return 0;
		if (getRepeat() instanceof DayRepeat) return 1;
		return 2;
	}

	public Repeat getRepeat() {
		return repeat;
	}

	public void setRepeat(Repeat repeat) {
		this.repeat = repeat;
	}
	

}